[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "multi-agent-tdd-system"
version = "0.1.0"
description = "AI-powered software development system that performs Test-Driven Development cycles autonomously"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Multi-Agent TDD Development Team", email = "dev@multi-agent-tdd.com"},
]
maintainers = [
    {name = "Multi-Agent TDD Development Team", email = "dev@multi-agent-tdd.com"},
]
keywords = [
    "ai", 
    "tdd", 
    "test-driven-development", 
    "multi-agent", 
    "claude", 
    "linear", 
    "automation",
    "clean-architecture"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: FastAPI",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "anthropic>=0.25.0,<1.0.0",
    "requests>=2.31.0,<3.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    "GitPython>=3.1.40,<4.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "pyyaml>=6.0.1,<7.0.0",
    "structlog>=23.2.0,<24.0.0",
    "tenacity>=8.2.3,<9.0.0",
    "cryptography>=41.0.0,<42.0.0",
    "python-dateutil>=2.8.2,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-xdist>=3.5.0,<4.0.0",
    "black>=23.12.0,<24.0.0",
    "ruff>=0.1.9,<1.0.0",
    "isort>=5.13.0,<6.0.0",
    "mypy>=1.8.0,<2.0.0",
    "types-requests>=2.31.0,<3.0.0",
    "types-PyYAML>=6.0.0,<7.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "bandit>=1.7.5,<2.0.0",
    "safety>=2.3.0,<3.0.0",
    "coverage[toml]>=7.4.0,<8.0.0",
]
docs = [
    "sphinx>=7.2.0,<8.0.0",
    "sphinx-rtd-theme>=2.0.0,<3.0.0",
    "myst-parser>=2.0.0,<3.0.0",
]
testing = [
    "httpx>=0.26.0,<1.0.0",
    "respx>=0.20.0,<1.0.0",
    "locust>=2.20.0,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/multi-agent-tdd/multi-agent-tdd-system"
Documentation = "https://multi-agent-tdd.readthedocs.io/"
Repository = "https://github.com/multi-agent-tdd/multi-agent-tdd-system.git"
"Bug Tracker" = "https://github.com/multi-agent-tdd/multi-agent-tdd-system/issues"
Changelog = "https://github.com/multi-agent-tdd/multi-agent-tdd-system/blob/main/CHANGELOG.md"

[project.scripts]
tdd-agent = "src.presentation.cli.main:main"
tdd-webhook = "src.presentation.api.webhook_server:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["src"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "git.*",
    "anthropic.*",
    "uvicorn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may use external services)",
    "e2e: End-to-end tests (full workflow testing)",
    "slow: Slow tests (may take several seconds)",
    "api: API endpoint tests",
    "webhook: Webhook integration tests",
    "agent: Agent-specific tests",
    "workflow: Workflow engine tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301", "B401", "B501", "B506", "B701"]

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["fastapi", "pydantic", "anthropic", "git"]

# setuptools configuration
[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]